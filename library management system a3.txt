import java.util.*;

// Class representing a book
class Book {
    private String title;
    private String author;
    private String isbn;
    private boolean isAvailable;

    public Book(String title, String author, String isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.isAvailable = true;
    }

    // Getters
    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    // Setter
    public void setAvailable(boolean isAvailable) {
        this.isAvailable = isAvailable;
    }

    // Display book details
    public void displayBookInfo() {
        System.out.println("Title: " + title + ", Author: " + author + ", ISBN: " + isbn + ", Available: " + isAvailable);
    }
}

// Class representing a library member
class Member {
    private String name;
    private String memberId;
    private List<Book> borrowedBooks;

    public Member(String name, String memberId) {
        this.name = name;
        this.memberId = memberId;
        this.borrowedBooks = new ArrayList<>();
    }

    // Getters
    public String getName() {
        return name;
    }

    public String getMemberId() {
        return memberId;
    }

    public List<Book> getBorrowedBooks() {
        return borrowedBooks;
    }

    // Borrow a book
    public void borrowBook(Book book) {
        borrowedBooks.add(book);
        book.setAvailable(false);
        System.out.println(name + " borrowed the book: " + book.getTitle());
    }

    // Return a book
    public void returnBook(Book book) {
        borrowedBooks.remove(book);
        book.setAvailable(true);
        System.out.println(name + " returned the book: " + book.getTitle());
    }

    // Display member details
    public void displayMemberInfo() {
        System.out.println("Name: " + name + ", ID: " + memberId);
        if (borrowedBooks.isEmpty()) {
            System.out.println("No books borrowed.");
        } else {
            System.out.println("Borrowed Books:");
            for (Book book : borrowedBooks) {
                System.out.println("- " + book.getTitle());
            }
        }
    }
}

// Class representing the library
class Library {
    private List<Book> books;
    private List<Member> members;

    public Library() {
        this.books = new ArrayList<>();
        this.members = new ArrayList<>();
    }

    // Add a book to the library
    public void addBook(Book book) {
        books.add(book);
        System.out.println("Book added: " + book.getTitle());
    }

    // Register a member
    public void addMember(Member member) {
        members.add(member);
        System.out.println("Member registered: " + member.getName());
    }

    // Search for a book by title
    public Book searchBookByTitle(String title) {
        for (Book book : books) {
            if (book.getTitle().equalsIgnoreCase(title)) {
                return book;
            }
        }
        return null;
    }

    // Search for a member by ID
    public Member searchMemberById(String memberId) {
        for (Member member : members) {
            if (member.getMemberId().equalsIgnoreCase(memberId)) {
                return member;
            }
        }
        return null;
    }

    // Borrow a book
    public void borrowBook(String memberId, String bookTitle) {
        Member member = searchMemberById(memberId);
        Book book = searchBookByTitle(bookTitle);

        if (member == null) {
            System.out.println("Member not found!");
        } else if (book == null) {
            System.out.println("Book not found!");
        } else if (!book.isAvailable()) {
            System.out.println("Book is not available.");
        } else {
            member.borrowBook(book);
        }
    }

    // Return a book
    public void returnBook(String memberId, String bookTitle) {
        Member member = searchMemberById(memberId);
        Book book = searchBookByTitle(bookTitle);

        if (member == null || book == null) {
            System.out.println("Member or book not found!");
        } else if (!member.getBorrowedBooks().contains(book)) {
            System.out.println("This book was not borrowed by this member.");
        } else {
            member.returnBook(book);
        }
    }

    // Display all books
    public void displayBooks() {
        for (Book book : books) {
            book.displayBookInfo();
        }
    }

    // Display all members
    public void displayMembers() {
        for (Member member : members) {
            member.displayMemberInfo();
        }
    }
}

// Main class to run the program
public class LibraryManagementSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Library library = new Library();

        boolean exit = false;
        while (!exit) {
            System.out.println("\nLibrary Management System");
            System.out.println("1. Add Book");
            System.out.println("2. Register Member");
            System.out.println("3. Borrow Book");
            System.out.println("4. Return Book");
            System.out.println("5. Display All Books");
            System.out.println("6. Display All Members");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter Book Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Book Author: ");
                    String author = scanner.nextLine();
                    System.out.print("Enter Book ISBN: ");
                    String isbn = scanner.nextLine();
                    library.addBook(new Book(title, author, isbn));
                    break;

                case 2:
                    System.out.print("Enter Member Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Member ID: ");
                    String memberId = scanner.nextLine();
                    library.addMember(new Member(name, memberId));
                    break;

                case 3:
                    System.out.print("Enter Member ID: ");
                    String borrowMemberId = scanner.nextLine();
                    System.out.print("Enter Book Title: ");
                    String borrowBookTitle = scanner.nextLine();
                    library.borrowBook(borrowMemberId, borrowBookTitle);
                    break;

                case 4:
                    System.out.print("Enter Member ID: ");
                    String returnMemberId = scanner.nextLine();
                    System.out.print("Enter Book Title: ");
                    String returnBookTitle = scanner.nextLine();
                    library.returnBook(returnMemberId, returnBookTitle);
                    break;

                case 5:
                    library.displayBooks();
                    break;

                case 6:
                    library.displayMembers();
                    break;

                case 7:
                    exit = true;
                    System.out.println("Exiting Library Management System.");
                    break;

                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
        scanner.close();
    }
}